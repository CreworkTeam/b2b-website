---
import MainLayout from '@/layouts/main-layout.astro';
import BlogHeader from '@/components/blog/blog-header.astro';
import Section from '@/components/section.astro';
import TOC from '@/components/blog/TOC.astro';
import { socials, getSocialShareLinks } from '@/constants';
import { Image } from 'astro:assets';
import TalkToUs from '@/components/talk-to-us.astro';
import { getCollection } from 'astro:content';
import BlogCard from '@/components/blog/blog-card';
import BtnClipBoard from '@/components/blog/btn-clipboard';
import { cn } from '@/lib/utils';

const { blogData } = Astro.props;
const {
  data: { blogTitle, blogDescription, blogCategories, blogImage },
  headings,
  slug,
} = blogData;

const url = Astro.url.href;

const blogs = await getCollection('blogs');
const rds = blogs.filter(({ data, slug: blogSlug }) => {
  const isSameCategory = data.blogCategories.some((category: any) =>
    blogCategories.includes(category),
  );
  return isSameCategory && blogSlug !== slug;
});
const recommendations =
  rds.length >= 2 ? rds.slice(0, 2) : blogs.filter(({ blogSlug }) => slug !== blogSlug).slice(0, 2);
---

<MainLayout
  title={blogTitle}
  description={blogDescription}
  canonical={`https://www.creworklabs.com/blog/${slug}`}
  og_image={blogImage.src}
>
  <Section className="border-b-0">
    <BlogHeader {...blogData} slug={slug} />
    <div class="mt-6 flex flex-col-reverse gap-12 md:flex-row md:gap-8" id="article-content">
      <div class="prose max-w-none flex-1 [&_a]:break-words">
        <slot />
        <div>
          <h4>Tags</h4>
          <div class="flex gap-2">
            {
              blogCategories.map((category) => (
                <div class="rounded-md border border-[#D8D8D8] bg-[#F4F4F4] px-2 py-1 text-sm font-normal text-[#3E3E3E] no-underline">
                  {category}
                </div>
              ))
            }
          </div>
        </div>
      </div>
      <div class="top-5 h-fit space-y-4 md:sticky md:w-3/12" id="toc">
        <div class="space-y-2">
          {
            headings && headings.length > 0 && (
              <>
                <h4 class="text-black">Contents</h4>
                <TOC headings={headings} />
              </>
            )
          }
        </div>
        <div class="space-y-2">
          <h4 class="text-black">Share</h4>
          <div class="flex justify-start gap-2">
            {
              socials.map((social) => (
                <a
                  href={getSocialShareLinks({ url: url, title: blogTitle })[social.name]}
                  target="_blank"
                  class="flex h-10 w-10 items-center justify-center rounded-full bg-[#F6F6F6] shadow-[0px_2px_2.5px_0px_#00000033]"
                >
                  <label class="sr-only">{social.name}</label>
                  <Image
                    src={social.icon}
                    alt={social.name}
                    class="h-4 w-4"
                    width={16}
                    height={16}
                  />
                </a>
              ))
            }
            <BtnClipBoard url={url} client:load />
          </div>
        </div>
      </div>
    </div>
    <div class="mt-6 space-y-3 md:space-y-4">
      <h2 class="font-bold">Recomendations</h2>
      <div class="flex flex-col md:flex-row">
        {
          recommendations.map(({ data, slug }, idx) => (
            <div
              class={cn('w-full py-3 md:w-1/2', {
                'md:pr-4': idx === 0,
                'md:pl-4': idx === 1,
              })}
            >
              <BlogCard {...data} slug={slug} />
            </div>
          ))
        }
      </div>
    </div>
  </Section>
  <TalkToUs text="Ready to go from idea to MVP?" />
</MainLayout>
<script>
  import { setupButtonTracking } from '../utils/mixpanel';
  setupButtonTracking({
    pageName: 'BlogPage',
  });

  window.addEventListener('scroll', () => {
    const sections = document.querySelectorAll('#article-content section');

    let prevHighlightedLink = document.querySelector('#toc li a.underline');

    sections.forEach((section) => {
      const rect = section.getBoundingClientRect();
      const isSectionHeadingOnTop = rect.top >= 0 && rect.top <= 200;

      if (isSectionHeadingOnTop) {
        const heading = section.querySelector('h2, h3, h4, h5');
        const id = heading.getAttribute('id');
        const link = document.querySelector(`#toc li a[href="#${id}"]`);

        if (prevHighlightedLink) {
          prevHighlightedLink.classList.remove('underline');
        }

        link.classList.add('underline');

        prevHighlightedLink = link;
      }
    });
  });
</script>
